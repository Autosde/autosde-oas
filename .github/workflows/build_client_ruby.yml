# support ruby autosde oas client gem

name: Build autosde ruby client gem

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # run action when pushed event
  push:
    branches:
    - main
    # run only when this file changed
#    paths:
#    - '**/site_manager_oas.json'
jobs:
  # This workflow contains a single job called "build"
  build:
    env:
      # need for self-hosted runners
      ImageOS: ubuntu20
      GEM_FOLDER: "generated/ruby"
      GEM_NAME: "autosde_openapi_client"
      SPEC_FILE_NAME: "site_manager_oas.json"
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.6
    # Runs  commands
    - name: generate ruby oas client
      run: |
        echo $GITHUB_WORKSPACE
        mkdir -p ${GITHUB_WORKSPACE}/${GEM_FOLDER}
        docker run \
        -v $GITHUB_WORKSPACE:/local \
        -v ${GITHUB_WORKSPACE}/${GEM_FOLDER}:/local_out \
        --name ruby-oas-generator \
        --rm \
        openapitools/openapi-generator-cli:v5.0.0 generate \
        -i /local/autosde_site_manager/project_common/${SPEC_FILE_NAME} -g ruby -o /local_out \
        --skip-validate-spec \
        --additional-properties=gemName=$GEM_NAME \
        --additional-properties=moduleName=AutosdeOpenapiClient \
        --additional-properties=gemLicense=Apache-2.0 \
        --additional-properties=gemHomepage=https://github.com/Autosde/autosde-oas/

    # increase gem version
    # get current version from last gem version at Rubygems
    # and increase patch part of it, that is 0.1.23 -> 0.1.24
    # update the version in relevant files
    - name: bump version (patch only)
      run: |
        cd $GEM_FOLDER
        gem install bump
        current_version=$(ruby -e "v=%x(gem list -r ${GEM_NAME});ver=v.split()[-1].delete('()');puts ver")
        echo $current_version
        next_version=$(ruby -r bump -e "puts Bump::Bump.next_version('patch', '${current_version}')")
        echo $next_version
        bump  set $next_version --replace-in lib/${GEM_NAME}/version.rb
        echo "NEXT_VERSION=$next_version" >> $GITHUB_ENV
    # build gem with new version and push to Rubygems
    - name: build and push gem
      run: |
        cd $GEM_FOLDER
        sudo gem build ${GEM_NAME}
        echo "Setting up gem credentials..."
        mkdir -p ~/.gem
        cat << EOF > ~/.gem/credentials
        ---
        :github: Bearer ${{ secrets.GITHUB_TOKEN }}
        :rubygems_api_key: ${{ secrets.RUBYGEMS_API_KEY }}
        EOF
        chmod 0600 ~/.gem/credentials
#        gem push "${GEM_NAME}-${NEXT_VERSION}.gem"
    - name: push generated to autosde
      run: |
        cd $GEM_FOLDER
        ls -al